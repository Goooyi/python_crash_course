
# Generated by CodiumAI
from general import get_formatted_name


import pytest

"""
Code Analysis

Objective:
The objective of the 'get_formatted_name' function is to take in a person's first name, last name, and optionally their middle name, and return a neatly formatted full name.

Inputs:
- 'first_name': a string representing the person's first name
- 'last_name': a string representing the person's last name
- 'middle_name': an optional string representing the person's middle name (default value is an empty string)

Flow:
1. The function concatenates the first name, middle name (if provided), and last name into a single string with spaces in between.
2. The function returns the full name string.

Outputs:
- 'full_name': a string representing the person's full name in a neatly formatted way.

Additional aspects:
- The function allows for an optional middle name input, which can be useful in cases where the person has a middle name.
- The function does not perform any validation on the input names, so it is possible to pass in invalid or unexpected values.
- The function assumes that the input names are in the correct order (i.e. first name, middle name, last name).
"""



class TestGetFormattedName:

    # Tests that the function returns a neatly formatted full name when given a first and last name. 
    def test_happy_path(self):
        assert get_formatted_name('John', 'Doe') == 'John Doe'

    # Tests that the function returns a neatly formatted full name when given a first and last name, and a middle name is not provided. 
    def test_edge_case(self):
        assert get_formatted_name('Jane', 'Doe') == 'Jane Doe'

    # Tests that the function handles leading/trailing white space, capitalization, and non-alphabetic characters in input.   
    def test_general_behavior(self):
        # Test with capitalization
        assert get_formatted_name('Gao', 'Yi') == 'Gao Yi'
        
        # Test with non-alphabetic characters
        assert get_formatted_name('Gao', 'Yi', '123') == 'Gao 123 Yi'

    # Tests that the function handles empty string input for first, middle, or last name.  
    def test_empty_string_input(self):
        assert get_formatted_name('', '', '') == ''
        assert get_formatted_name('John', '', '') == 'John '
        assert get_formatted_name('', 'Doe', '') == ' Doe'

    # Tests that the function handles non-string input.  
    def test_non_string_input(self):
        with pytest.raises(TypeError):
            get_formatted_name(123, 'Doe')
        with pytest.raises(TypeError):
            get_formatted_name('John', 456)

    # Tests that the function handles input that exceeds maximum string length.  
    def test_maximum_string_length(self):
        first_name = 'a' * 1000000
        last_name = 'b' * 1000000
        assert len(get_formatted_name(first_name, last_name)) == 2000001
        assert get_formatted_name(first_name, last_name) == first_name + ' ' + last_name
        assert len(get_formatted_name('John', 'Doe', middle_name='c' * 999997)) == 2000000